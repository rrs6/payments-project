services:

  api:
    build:
      context: ./transaction-validator
      dockerfile: dockerfile
    env_file:
      - /.env
    environment:
      - JDBC_PAYMENT_DATASOURCE_URL=${JDBC_PAYMENT_DATASOURCE_URL}
      - AWS_CREDENTIALS_ACCESS_KEY=${AWS_CREDENTIALS_ACCESS_KEY}
      - AWS_CREDENTIALS_SECRET_KEY=${AWS_CREDENTIALS_SECRET_KEY}
      - AWS_SQS_URL2=${AWS_SQS_URL2}
      - JDBC_PAYMENT_PASSWORD=${JDBC_PAYMENT_PASSWORD}
      - JDBC_PAYMENT_USER=${JDBC_PAYMENT_USER} 
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8080:8080"
    depends_on:
      - db

  consumer:
    build:
      context: ./paymentprocessor
      dockerfile: dockerfile
    env_file:
      - /.env
    environment:
      - JDBC_VALIDATOR_DATASOURCE_URL=${JDBC_VALIDATOR_DATASOURCE_URL}
      - AWS_CREDENTIALS_ACCESS_KEY=${AWS_CREDENTIALS_ACCESS_KEY}
      - AWS_CREDENTIALS_SECRET_KEY=${AWS_CREDENTIALS_SECRET_KEY}
      - AWS_SQS_URL1=${AWS_SQS_URL1}
      - JDBC_VALIDATOR_PASSWORD=${JDBC_VALIDATOR_PASSWORD}
      - JDBC_VALIDATOR_USER=${JDBC_VALIDATOR_USER} 
    ports:
      - "8081:8080"
    depends_on:
      - db_consumer

  db:
    image: postgres:17
    container_name: transaction-validator
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: transaction-validator-db
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  db_consumer:
    image: postgres:17
    container_name: paymentprocessor
    restart: always
    environment:
      POSTGRES_USER: ${JDBC_PAYMENT_USER}
      POSTGRES_PASSWORD: ${JDBC_PAYMENT_PASSWORD}
      POSTGRES_DB: ${JDBC_PAYMENT_DB}
    ports:
      - "5434:5432"
    volumes:
      - paymentprocessor_data:/var/lib/postgresql/data

volumes:
  postgres_data:
  paymentprocessor_data: